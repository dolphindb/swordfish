defg avgReduce(mysum, mycount){
	totalsum =sum(mysum).double()
	return totalsum/sum(mycount)
}

defg stdReduce(mysum, mysum2, mycount){ 
	cnt=sum(mycount)
	if(cnt<2) return 00F 
	
	totalsum=sum(mysum).double()
	res = (sum(mysum2)-totalsum*totalsum/cnt)/(cnt-1)
	if (res < 0) return 0
	return sqrt(res)
}

defg stdpReduce(mysum, mysum2, mycount){ 
	cnt=sum(mycount)
	if(cnt<1) return 00F 
	
	totalsum=sum(mysum).double()
	res = (sum(mysum2)-totalsum*totalsum/cnt)/cnt
	if (res < 0) return 0
	return sqrt(res)
}

defg varReduce(mysum, mysum2, mycount){ 
	cnt=sum(mycount)
	if(cnt<2) return 00F
	
	totalsum = sum(mysum).double()
	return (sum(mysum2)-totalsum*totalsum/cnt)/(cnt-1)
}

defg varpReduce(mysum, mysum2, mycount){ 
	cnt=sum(mycount)
	if(cnt<1) return 00F
	
	totalsum = sum(mysum).double()
	return (sum(mysum2)-totalsum*totalsum/cnt)/cnt
}

defg skewReduce(mysum, mysum2, mysum3, mycount){ 
	cnt=sum(mycount)
	if(cnt<2) return 00F
	
	totalsum = sum(mysum).double()
	totalsum2 = sum(mysum2).double()
	myvar = (totalsum2 - totalsum*totalsum/cnt)/cnt
	m3 = (sum(mysum3) - 3*totalsum/cnt*totalsum2 + 2*cnt*pow(totalsum/cnt, 3))/cnt
	return m3/pow(myvar,1.5)
}

defg skewReduce2(mysum, mysum2, mysum3, mycount, biased){ 
	cnt=sum(mycount)
	if(cnt<2 || (!biased && cnt<3)) return 00F
	
	totalsum = sum(mysum).double()
	totalsum2 = sum(mysum2).double()

	if (totalsum2 / cnt <= 2.2204460492503131e-16) {
		return double(NULL)
	}

	myvar = (totalsum2 - totalsum*totalsum/cnt)/cnt
	m3 = (sum(mysum3) - 3*totalsum/cnt*totalsum2 + 2*cnt*pow(totalsum/cnt, 3))/cnt
	if(biased)
		return m3/pow(myvar,1.5)
	else
		return sqrt((cnt - 1.0)*cnt)/(cnt - 2) * m3/pow(myvar,1.5)
}

defg kurtosisReduce(mysum, mysum2, mysum3, mysum4, mycount){ 
	cnt=sum(mycount)
	if(cnt<3) return 00F
	
	totalsum = sum(mysum).double()
	mean = totalsum/cnt
	totalsum2 = sum(mysum2).double()
	totalsum3 = sum(mysum3).double()
	myvar = (totalsum2 - totalsum*totalsum/cnt)/cnt
	m4 = (sum(mysum4) - 3*cnt*pow(mean, 4) - 4*mean*totalsum3 + 6*mean*mean*totalsum2)/cnt
	return m4/myvar/myvar
}

defg kurtosisReduce2(mysum, mysum2, mysum3, mysum4, mycount, biased){ 
	cnt=sum(mycount)
	if(cnt<3 || (!biased && cnt<4)) return 00F
	
	totalsum = sum(mysum).double()
	mean = totalsum/cnt
	totalsum2 = sum(mysum2).double()
	totalsum3 = sum(mysum3).double()

	if (totalsum2 / cnt <= 2.2204460492503131e-16) {
		return double(NULL)
	}

	myvar = (totalsum2 - totalsum*totalsum/cnt)/cnt
	m4 = (sum(mysum4) - 3*cnt*pow(mean, 4) - 4*mean*totalsum3 + 6*mean*mean*totalsum2)/cnt
	if(biased)
		return m4/myvar/myvar
	else
		return ((cnt + 1)*m4/myvar/myvar - 3.0*(cnt - 1))*(cnt - 1)/(cnt - 2)/(cnt - 3) + 3
}

defg covarReduce(mysumxy, mysumx, mysumy, mycount){
	cnt=sum(mycount)
	if(cnt<2) 
		return 00F
	
	totalsumx = sum(mysumx).double()
	totalsumy = sum(mysumy).double()
	return (sum(mysumxy)-totalsumx*totalsumy/cnt)/(cnt-1)
} 

defg corrReduce(mysumxy, mysumx2, mysumx, mysumy2, mysumy, mycount){
	cnt=sum(mycount) 
	if(cnt<2) 
		return 00F
		
	totalsumx = sum(mysumx).double()
	totalsumy = sum(mysumy).double()
	return (sum(mysumxy)-totalsumx*totalsumy/cnt)/sqrt((sum(mysumx2)-totalsumx*totalsumx/cnt)*(sum(mysumy2)-totalsumy*totalsumy/cnt))
} 

def avgRunning(mysum, mycount): mysum\mycount
def varRunning(mysum, mysum2, mycount): (mysum2 - mysum\mycount*mysum)/(mycount - 1)
def stdRunning(mysum, mysum2, mycount): sqrt((mysum2 - mysum\mycount*mysum)/(mycount - 1))
def varpRunning(mysum, mysum2, mycount): (mysum2 - mysum\mycount*mysum)/mycount
def stdpRunning(mysum, mysum2, mycount): sqrt((mysum2 - mysum\mycount*mysum)/mycount)

def skewRunning(mysum, mysum2, mysum3, mycount){
	mean = mysum\mycount
	myvar = (mysum2 - mean*mysum)/mycount
	m3=(mysum3 - 3.0*mean*mysum2 + 2.0*mycount*pow(mean, 3))/mycount
	return iif(mycount<2, 00F, m3/pow(myvar,1.5))
}

def skewRunning2(mysum, mysum2, mysum3, mycount, biased){
	mean = mysum\mycount
	myvar = (mysum2 - mean*mysum)/mycount
	m3=(mysum3 - 3.0*mean*mysum2 + 2.0*mycount*pow(mean, 3))/mycount
	if(biased)
		return iif(mycount<2, 00F, m3/pow(myvar,1.5))
	else
		return iif(mycount<3, 00F, sqrt((mycount - 1.0)*mycount)/(mycount - 2) * m3/pow(myvar,1.5))
}

def kurtosisRunning(mysum, mysum2, mysum3, mysum4, mycount){ 
	mean = mysum\mycount
	myvar = (mysum2 - mean*mysum)/mycount
	m4=(mysum4 - 3*mycount*pow(mean, 4) - 4*mean*mysum3 + 6*mean*mean*mysum2)/mycount
	return iif(mycount<3, 00F, m4/myvar/myvar)
}

def kurtosisRunning2(mysum, mysum2, mysum3, mysum4, mycount, biased){ 
	mean = mysum\mycount
	myvar = (mysum2 - mean*mysum)/mycount
	m4=(mysum4 - 3*mycount*pow(mean, 4) - 4*mean*mysum3 + 6*mean*mean*mysum2)/mycount
	if(biased)
		return iif(mycount<3, 00F, m4/myvar/myvar)
	else
		return iif(mycount<4, 00F, ((mycount + 1)*m4/myvar/myvar - 3.0*(mycount - 1))*(mycount - 1)/(mycount - 2)/(mycount - 3) + 3)
}

def covarRunning(mysumxy, mysumx, mysumy, mycount): (mysumxy - mysumx\mycount*mysumy)/(mycount - 1)
def corrRunning(mysumxy, mysumx2, mysumx, mysumy2, mysumy, mycount): (mysumxy - mysumx\mycount*mysumy)/sqrt((mysumx2 - mysumx\mycount*mysumx)*(mysumy2 - mysumy\mycount*mysumy))

defg tval(x, w){
	wavgX = wavg(x, w)
	wavgX2 = wavg(x*x, w)
	return wavgX/sqrt(wavgX2 - wavgX.square())
}

def wsum2(X,Y): wsum(X*X, Y)

defg tvalReduce(wsumX, wsumX2, w){
	wavgX = wsumX.sum()\w.sum()
	wavgX2 = wsumX2.sum\w.sum()
	return wavgX/sqrt(wavgX2 - wavgX.square())
}

def tvalRunning(wsumX, wsumX2, w){
	wavgX = wsumX\w
	wavgX2 = wsumX2\w
	return wavgX/sqrt(wavgX2 - wavgX.square())
}

mapr tval(x, w){wsum(x, w), wsum2(x, w), contextSum(w, x)->tvalReduce; cumsum, cumsum, cumsum->tvalRunning}

defg geometricMean(x){
    return x.log().avg().exp()
}
def logAvg(x) : log(x).avg()
defg geometricMeanReduce(logAvgs, counts) : wavg(logAvgs, counts).exp()
def geometricMeanRunning(logAvgs, counts) : cumwavg(logAvgs, counts).exp()

mapr geometricMean(x){logAvg(x), count(x) -> geometricMeanReduce; copy, copy->geometricMeanRunning}

mapr distinct(x){distinct(x)->distinct}
mapr nunique(x){distinct(x)->nunique}
mapr sum(x){sum(x)->sum; cumsum}
mapr sum2(x){sum2(x)->sum; cumsum}
mapr sum3(x){sum3(x)->sum; cumsum}
mapr sum4(x){sum4(x)->sum; cumsum}
mapr prod(x){prod(x)->prod; cumprod}
mapr max(x){max(x)->max; cummax}
mapr min(x){min(x)->min; cummin}
mapr first(x){first(x)->first; first}
mapr last(x){last(x)->last; copy}
mapr firstNot(x){firstNot(x)->firstNot}
mapr firstNot(x, exclude){firstNot(x, exclude)->firstNot}
mapr lastNot(x){lastNot(x)->lastNot}
mapr lastNot(x, exclude){lastNot(x, exclude)->lastNot}
mapr count(x){count(x)->sum; cumsum}
mapr size(x){size(x)->sum; cumsum}
mapr avg(x){sum(x),count(x)->avgReduce; cumsum,cumsum->avgRunning}
mapr std(x){sum(x),sum2(x),count(x)->stdReduce; cumsum,cumsum,cumsum->stdRunning}
mapr stdp(x){sum(x),sum2(x),count(x)->stdpReduce; cumsum,cumsum,cumsum->stdpRunning}
mapr var(x){sum(x),sum2(x),count(x)->varReduce; cumsum,cumsum,cumsum->varRunning}
mapr varp(x){sum(x),sum2(x),count(x)->varpReduce; cumsum,cumsum,cumsum->varpRunning}
mapr skew(x){sum(x),sum2(x),sum3(x),count(x)->skewReduce; cumsum,cumsum,cumsum,cumsum->skewRunning}
mapr skew(x, biased){sum(x),sum2(x),sum3(x),count(x),copy(biased)->skewReduce2; cumsum,cumsum,cumsum,cumsum,copy->skewRunning2}
mapr kurtosis(x){sum(x),sum2(x),sum3(x),sum4(x),count(x)->kurtosisReduce; cumsum,cumsum,cumsum,cumsum,cumsum->kurtosisRunning}
mapr kurtosis(x, biased){sum(x),sum2(x),sum3(x),sum4(x),count(x),copy(biased)->kurtosisReduce2; cumsum,cumsum,cumsum,cumsum,cumsum,copy->kurtosisRunning2}
mapr wsum(x,y){wsum(x,y)->sum; cumsum}
mapr contextCount(x,y){contextCount(x,y)->sum; cumsum}
mapr contextSum(x,y){contextSum(x,y)->sum; cumsum}
mapr contextSum2(x,y){contextSum2(x,y)->sum; cumsum}
mapr wavg(x,y){wavg(x,y),contextSum(y,x)->wavg; copy,copy->cumwavg}
mapr covar(x,y){wsum(x,y),contextSum(x,y),contextSum(y,x),contextCount(y,x)->covarReduce; cumsum,cumsum,cumsum,cumsum->covarRunning}
mapr corr(x,y){wsum(x,y),contextSum2(x,y),contextSum(x,y),contextSum2(y,x),contextSum(y,x),contextCount(y,x)->corrReduce; cumsum,cumsum,cumsum,cumsum,cumsum,cumsum->corrRunning}
mapr atImax(x,y){max(x),atImax(x,y)->atImax}
mapr atImin(x,y){min(x),atImin(x,y)->atImin}
